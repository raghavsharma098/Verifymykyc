<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="icon" href="/favicon.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        :root {
            --primary: #1a7f5a;
            --primary-light: #ffffff;
            --primary-dark: #156b4a;
            --danger: #dc3545;
            --danger-light: #fbe9eb;
            --text-primary: #2d3748;
            --text-secondary: #4a5568;
            --border: #e2e8f0;
            --radius: 12px;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --transition: all 0.3s ease;
        }

        body {
            background-color: #ffffff;
            color: var(--text-primary);
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
        }

        .main {
            padding: 2rem;
        }

        .card {
            border: none;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            background: white;
            transition: var(--transition);
        }

        .card:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .card-header {
            background: white;
            border-bottom: 1px solid var(--border);
            padding: 1.5rem;
            border-radius: var(--radius) var(--radius) 0 0 !important;
        }

        .card-header h4 {
            color: var(--primary);
            font-weight: 600;
            font-size: 1.5rem;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .card-body {
            padding: 2rem;
        }

        .form-label {
            color: var(--text-secondary);
            font-weight: 500;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-control {
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            transition: var(--transition);
        }

        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
        }

        .form-control[readonly] {
            background-color: #f8fafc;
            cursor: not-allowed;
        }

        .form-select {
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            transition: var(--transition);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        }

        .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            border-radius: 8px;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background-color: var(--primary);
            border-color: var(--primary);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
            transform: translateY(-1px);
        }

        .btn-danger {
            background-color: var(--danger);
            border-color: var(--danger);
        }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
            transform: translateY(-1px);
        }

        .btn-link {
            color: var(--primary);
            text-decoration: none;
            padding: 0.5rem 1rem;
        }

        .btn-link:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }

        .badge {
            padding: 0.5rem 1rem;
            font-weight: 500;
            border-radius: 6px;
        }

        .bg-success {
            background-color: var(--primary) !important;
        }

        .bg-warning {
            background-color: #f59e0b !important;
            color: white !important;
        }

        .input-group {
            gap: 0.5rem;
        }

        .input-group .btn {
            padding: 0.75rem 1rem;
        }

        /* Modal Styling */
        .modal-content {
            border: none;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
        }

        .modal-header {
            border-bottom: 1px solid var(--border);
            padding: 1.5rem;
        }

        .modal-title {
            color: var(--text-primary);
            font-weight: 600;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            border-top: 1px solid var(--border);
            padding: 1.5rem;
        }

        /* Status Badge Container */
        .form-control.bg-light {
            background-color: #f8fafc !important;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 1rem;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .main {
                padding: 1rem;
            }

            .card-body {
                padding: 1.5rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
                margin-bottom: 0.5rem;
            }

            .d-flex.justify-content-between {
                flex-direction: column;
                gap: 1rem;
            }
        }

        /* Animation for status changes */
        .badge {
            transition: var(--transition);
        }

        .badge:hover {
            transform: scale(1.05);
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--primary-dark);
        }
    </style>
</head>
<body>
    
    <div class="dashboard-container" style="background-color: #ffffff;">
        <%- include('sidenav') %>

        <main class="main" style="margin-top: 100px;">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="mb-0"><i class="fa-solid fa-user me-2"></i>My Profile</h4>
                            </div>
                            <div class="card-body">
                                <form id="profileForm">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="name" class="form-label"><i class="fa-solid fa-user me-2"></i>Name</label>
                                            <input type="text" class="form-control" id="name" name="name" value="<%= user.name || '' %>" required>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="email" class="form-label"><i class="fa-solid fa-envelope me-2"></i>Email</label>
                                            <div class="input-group">
                                                <input type="email" class="form-control" id="email" value="<%= user.email || '' %>" <%= user.email ? 'readonly' : '' %>>
                                                <% if (!user.email) { %>
                                                    <button class="btn btn-primary" onclick="addEmail()">Add Email</button>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="phone" class="form-label"><i class="fa-solid fa-phone me-2"></i>Phone</label>
                                            <div class="input-group">
                                                <input type="tel" class="form-control" id="phone" value="<%= user.phone || '' %>" <%= user.phone ? 'readonly' : '' %>>
                                                <% if (!user.phone) { %>
                                                    <button class="btn btn-primary" onclick="addPhone()">Add Phone</button>
                                                <% } %>
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="gender" class="form-label"><i class="fa-solid fa-venus-mars me-2"></i>Gender</label>
                                            <select class="form-select" id="gender" name="gender" required>
                                                <option value="">Select Gender</option>
                                                <option value="male" <%= user.gender === 'male' ? 'selected' : '' %>>Male</option>
                                                <option value="female" <%= user.gender === 'female' ? 'selected' : '' %>>Female</option>
                                                <option value="other" <%= user.gender === 'other' ? 'selected' : '' %>>Other</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="age" class="form-label"><i class="fa-solid fa-calendar me-2"></i>Age</label>
                                            <input type="number" class="form-control" id="age" name="age" value="<%= user.age || '' %>" min="1" max="120" required>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label"><i class="fa-solid fa-envelope me-2"></i>Email Status</label>
                                            <div class="form-control bg-light">
                                                <span class="badge <%= user.isEmailVerified ? 'bg-success' : 'bg-warning' %>">
                                                    <%= user.isEmailVerified ? 'Verified' : 'Not Verified' %>
                                                </span>
                                                <% if (user.email && !user.isEmailVerified) { %>
                                                    <button class="btn btn-sm btn-primary ms-2" onclick="verifyEmail()">Verify Email</button>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label"><i class="fa-solid fa-phone me-2"></i>Phone Status</label>
                                            <div class="form-control bg-light">
                                                <span class="badge <%= user.isPhoneVerified ? 'bg-success' : 'bg-warning' %>">
                                                    <%= user.isPhoneVerified ? 'Verified' : 'Not Verified' %>
                                                </span>
                                                <% if (user.phone && !user.isPhoneVerified) { %>
                                                    <button class="btn btn-sm btn-primary ms-2" onclick="verifyPhone()">Verify Phone</button>
                                                <% } %>
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label"><i class="fa-solid fa-calendar me-2"></i>Member Since</label>
                                            <input type="text" class="form-control" value="<%= new Date(user.createdAt).toLocaleDateString() %>" readonly>
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-between mt-4">
                                        <button type="button" class="btn btn-primary" onclick="updateProfile()">
                                            <i class="fa-solid fa-save me-2"></i>Update Profile
                                        </button>
                                        <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                                            <i class="fa-solid fa-trash me-2"></i>Delete Profile
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete your profile? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" onclick="deleteProfile()">Delete Profile</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Email Verification Modal -->
    <div class="modal fade" id="emailVerificationModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Verify Email</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="emailOtpForm">
                        <div class="mb-3">
                            <label for="emailOtp" class="form-label">Enter OTP</label>
                            <input type="text" class="form-control" id="emailOtp" placeholder="Enter 6-digit OTP" maxlength="6">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="submitEmailOtp()">Verify OTP</button>
                        <button type="button" class="btn btn-link" onclick="resendEmailOtp()">Resend OTP</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Phone Verification Modal -->
    <div class="modal fade" id="phoneVerificationModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Verify Phone</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="phoneOtpForm">
                        <div class="mb-3">
                            <label for="phoneOtp" class="form-label">Enter OTP</label>
                            <input type="text" class="form-control" id="phoneOtp" placeholder="Enter 6-digit OTP" maxlength="6">
                        </div>
                        <button type="button" class="btn btn-primary" onclick="submitPhoneOtp()">Verify OTP</button>
                        <button type="button" class="btn btn-link" onclick="resendPhoneOtp()">Resend OTP</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let deleteModal;
        let emailVerificationModal;
        let phoneVerificationModal;
       

        async function updateProfile() {
            const formData = {
                name: document.getElementById('name').value,
                gender: document.getElementById('gender').value,
                age: document.getElementById('age').value
            };

            try {
                const response = await fetch('/update-profile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (data.success) {
                    alert('Profile updated successfully!');
                    location.reload();
                } else {
                    alert(data.message || 'Error updating profile');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating profile. Please try again.');
            }
        }

        function confirmDelete() {
            deleteModal.show();
        }

        async function deleteProfile() {
            try {
                const response = await fetch('/delete-profile', {
                    method: 'POST'
                });

                const data = await response.json();

                if (data.success) {
                    alert('Profile deleted successfully!');
                    window.location.href = '/logout';
                } else {
                    alert(data.message || 'Error deleting profile');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting profile. Please try again.');
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            var sidebar = document.getElementById('dashboardSidebar');
            var hamburger = document.getElementById('sidebarHamburger');
            var overlay = document.getElementById('sidebarOverlay');
            var closeBtn = document.getElementById('sidebarClose');
            
            function openSidebar() {
                sidebar.classList.add('open');
                overlay.style.display = 'block';
                setTimeout(() => overlay.classList.add('active'), 10);
                document.body.style.overflow = 'hidden';
                if (closeBtn) closeBtn.focus();
            }
            
            function closeSidebar() {
                sidebar.classList.remove('open');
                overlay.classList.remove('active');
                setTimeout(() => {
                    if (!sidebar.classList.contains('open')) {
                        overlay.style.display = 'none';
                    }
                }, 300);
                document.body.style.overflow = '';
                if (hamburger) hamburger.focus();
            }

            if (hamburger) hamburger.addEventListener('click', openSidebar);
            if (closeBtn) closeBtn.addEventListener('click', closeSidebar);
            if (overlay) overlay.addEventListener('click', closeSidebar);

            // Close on ESC key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') closeSidebar();
            });

            deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            emailVerificationModal = new bootstrap.Modal(document.getElementById('emailVerificationModal'));
            phoneVerificationModal = new bootstrap.Modal(document.getElementById('phoneVerificationModal'));
        });

        async function addEmail() {
            const email = document.getElementById('email').value;
            if (!email) {
                alert('Please enter an email address');
                return;
            }

            try {
                const response = await fetch('/auth/add-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email })
                });

                const data = await response.json();
                if (data.success) {
                    emailVerificationModal.show();
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error adding email. Please try again.');
            }
        }

        async function addPhone() {
            const phone = document.getElementById('phone').value;
            if (!phone) {
                alert('Please enter a phone number');
                return;
            }

            try {
                const response = await fetch('/auth/add-phone', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ phone })
                });

                const data = await response.json();
                if (data.success) {
                    phoneVerificationModal.show();
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error adding phone. Please try again.');
            }
        }

        async function verifyEmail() {
            try {
                const response = await fetch('/auth/send-email-otp', {
                    method: 'POST'
                });

                const data = await response.json();
                if (data.success) {
                    emailVerificationModal.show();
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error sending OTP. Please try again.');
            }
        }

        async function verifyPhone() {
            try {
                const phone = document.getElementById('phone').value;
                const response = await fetch('/auth/send-phone-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ phone })
                });

                const data = await response.json();
                if (data.success) {
                    phoneVerificationModal.show();
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error sending OTP. Please try again.');
            }
        }

        async function submitEmailOtp() {
            const otp = document.getElementById('emailOtp').value;
            if (!otp) {
                alert('Please enter OTP');
                return;
            }

            try {
                const response = await fetch('/auth/verify-email-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ otp })
                });

                const data = await response.json();
                if (data.success) {
                    alert('Email verified successfully!');
                    location.reload();
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error verifying OTP. Please try again.');
            }
        }

        async function submitPhoneOtp() {
            const otp = document.getElementById('phoneOtp').value;
            const phone = document.getElementById('phone').value;
            if (!otp) {
                alert('Please enter OTP');
                return;
            }

            try {
                const response = await fetch('/auth/verify-phone-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ otp, phone })
                });

                const data = await response.json();
                if (data.success) {
                    alert('Phone verified successfully!');
                    location.reload();
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error verifying OTP. Please try again.');
            }
        }

        async function resendEmailOtp() {
            try {
                const response = await fetch('/auth/resend-email-otp', {
                    method: 'POST'
                });

                const data = await response.json();
                alert(data.message);
            } catch (error) {
                console.error('Error:', error);
                alert('Error resending OTP. Please try again.');
            }
        }

        async function resendPhoneOtp() {
            try {
                const response = await fetch('/auth/resend-phone-otp', {
                    method: 'POST'
                });

                const data = await response.json();
                alert(data.message);
            } catch (error) {
                console.error('Error:', error);
                alert('Error resending OTP. Please try again.');
            }
        }
    </script>
</body>
</html>